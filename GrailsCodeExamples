
Code Examples


Video 16: Simple Security

File: EndUser.groovy
	
package projecttracker

class EndUser {
    String userName
    String password
    String fullName
    String toString() {
        "${fullName}"
    }

    static constraints = {
        fullName()     
        userName(unique: true)
        password(password: true)
       
    }
    static hasMany = [projects : Project, tasks : Task]
}

File: login.gsp

<%@ page import="projecttracker.EndUser" %>
<!doctype html>
<html>
    <head>
        <meta name="layout" content="main">
        <g:set var="entityName" value="ProjectTracker Login" />
        <title><g:message code="ProjectTracker Login" args="[entityName]" /></title>
    </head>
    <body>
        <a href="#create-endUser" class="skip" tabindex="-1"><g:message code="default.link.skip.label" default="Skip to content&hellip;"/></a>
        <div class="nav" role="navigation">
            <ul>
                <li><a class="home" href="${createLink(uri: '/')}"><g:message code="default.home.label"/></a></li>
                <li><g:link class="list" action="logout"><g:message code="Logout" args="[entityName]" /></g:link></li>
            </ul>
        </div>
        <div id="create-endUser" class="content scaffold-create" role="main">
            <h1><g:message code="ProjectTracker Login" /></h1>
            <g:if test="${flash.message}">
            <div class="message" role="status">${flash.message}</div>
            </g:if>
            <g:hasErrors bean="${endUserInstance}">
            <ul class="errors" role="alert">
                <g:eachError bean="${endUserInstance}" var="error">
                <li <g:if test="${error in org.springframework.validation.FieldError}">data-field-id="${error.field}"</g:if>><g:message error="${error}"/></li>
                </g:eachError>
            </ul>
            </g:hasErrors>
            <g:form action="authenticate" >
                <fieldset class="form">
                    <div class="fieldcontain ${hasErrors(bean: endUserInstance, field: 'userName', 'error')} ">
                        <label for="userName">
                            <g:message code="endUser.userName.label" default="User Name" />
                           
                        </label>
                        <g:textField name="userName" value="${endUserInstance?.userName}"/>
                    </div>
                   
                    <div class="fieldcontain ${hasErrors(bean: endUserInstance, field: 'password', 'error')} ">
                        <label for="password">
                            <g:message code="endUser.password.label" default="Password" />
                           
                        </label>
                        <g:field type="password" name="password" value="${endUserInstance?.password}"/>
                    </div>
                </fieldset>
                <fieldset class="buttons">
                    <g:submitButton name="login" class="save" value="Login" />
                </fieldset>
            </g:form>
        </div>
    </body>
</html>

File: EndUserController.groovy
	
def login = {}
   
    def authenticate = {
        def user = EndUser.findByUserNameAndPassword(params.userName, params.password)
        if(user){
            session.user = user
            flash.message = "Hello ${user.fullName}!"
            redirect(action:"login")
           
        }else{
        flash.message = "Sorry, ${params.userName}. Please try again."
        redirect(action:"login")
        }
    }
   
    def logout = {
        flash.message = "Goodbye ${session.user.fullName}"
        session.user = null
        redirect(action:"login")
    }

File: ProjectController.groovy
	
package projecttracker

class ProjectController {

    def beforeInterceptor = [action:this.&auth]
   
    def scaffold=true
    def index() {
        redirect(action: "list")
    }
    def auth() {
        if(!session.user) {
            redirect(controller:"EndUser", action:"login")
            return false
        }
    }
   
}
Video 15: Constraints and Static Scaffolding

File: Project.groovy
	
package projecttracker

class Project {
    String name
    String description
    Date dueDate
    String billingType
    String toString () {
        "${name}"
    }
    static belongsTo = [owner : EndUser]
    static hasMany = [tasks : Task]

    static constraints = {
        name(blank: false, unique: true)
        description()
        dueDate(min: new Date())
        billingType(inList: ["Hourly", "Milestone", "Non-billable"])
    }
}
Video 13: Designing the Data Model

File: Project.groovy
	
package projecttracker

class Project {
    String name
    String description
    Date dueDate
    static belongsTo = [owner : EndUser]
    static hasMany = [tasks : Task]

    static constraints = {
    }
}

File: Task.groovy
	
package projecttracker

import java.util.Date;

class Task {
    String name
    String description
    Date dueDate
    static belongsTo = [assignee : EndUser, project : Project]
    static constraints = {
    }
}

File: EndUser.groovy
	
package projecttracker

class EndUser {
    String userName
    String password
    String fullName
    static hasMany = [projects : Project, tasks : Task]

    static constraints = {
    }
}
Videos 11-12: Creating a Model

File: ListProjects.groovy

package projecttracker

class ListProjects {
    String name
    String description
    Date dueDate

    static constraints = {
    }
}

File: ListProjectsController.groovy
package projecttracker

class ListProjectsController {

    def index = {
        redirect (action: current)
    }
   
    def current = {
        def allProjects = ListProjects.list()
        [allProjects:allProjects]
    }
   
    def overdue = {
        render "Order Valentines Day Package"
    }
}

File: current.gsp
	
<html>
<head>
   <title>Current Projects</title>
</head>

<body>
<table border="1">
    <g:each in="${allProjects}" status="i" var="thisProject">
        <tr>
            <td>${thisProject.name}</td>
            <td>${thisProject.description}</td>
            <td>${thisProject.dueDate}</td>
        </tr>
    </g:each>
</table>
</body>
</html>
Video 10: Creating a View

File: ListProjectsController.groovy
	
package projecttracker

class ListProjectsController {
    def index = {
        redirect (action:current)
    }

    def current = {
        def projectName = "Project Tracker Video Tutorials"
        def dueDate = "3/3/2012"
        [project:projectName, date:dueDate]
    }

    def overdue = {
        render "Order Valentines Day Package"
    }

File: current.gsp
	
<html>
<head>
   <title>Current Projects</title>
</head>
<body>
   <form>
      Project: <input type="text" size=40 name="project" value=${project}" />
      <p>Due Date: <input type="text" name="date" value=${date}" /></p>
   </form>
</body>
</html>
Video 9: Creating a Controller

File: ListProjectsController.groovy

	
class ListProjectsController {
    def index = {
        redirect (action: current)
    }

    def current = {
        render "Project Tracker Video Tutorials"
    }

    def overdue = {
        render "Order Valentines Day Package"
    }
    
    
    
    Property of Mike Kelly, www.grailsexample.net
